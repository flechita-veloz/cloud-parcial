"use client";
import { v4 as uuidv4 } from 'uuid';
import { useState, useEffect, useRef, useMemo} from "react";
import { Button, Select, MenuItem} from "@mui/material";
import { useRouter } from "next/navigation";
import { Trash2, SearchIcon, User, IdCard, MapPin, Edit, Plus, UserX } from "lucide-react";
import SavePurchaseModal from "./SavePurchaseModal";
import CreateProductModal from "@/app/products/CreateProductModal";
import CreateClientModal from "@/app/clients/CreateClientModal";
import debounce from "lodash/debounce";
import { useCreatePurchaseMutation, useCreateSalesDetailMutation, useCreateTransactionMutation,
         useCreateProductMutation, useCreateClientMutation, useUpdateProductMutation,
         useSearchProductsQuery, useSearchClientsQuery, useGetClientByIdQuery,
         useGetLastPurchaseNumberQuery, 
         Product, Transaction, Client,
       } from "@/state/api"; 

type ClientDocumentFormData = {
  number: string;
  typeDocument: string;
}

type ClientFormData = {
  clientId: string;
  name: string;
  document?: ClientDocumentFormData | null;
  type: string;
  phone?: string;
  mail?: string;
  address?: string;
};

type selectedProduct = {
  code: string;
  price: number;
  valueTax: number; 
  typeTax: string;
  quantity: number;
  name: string;
  productId: string;
};

type ProductFormData = {
  productId: string;
  name: string;
  price: number;
  stockQuantity: number;
  code: string;
  typeTax: string;
  valueTax: number;
  includeTax: boolean;
};

type PurchaseTransaction = {
  date: string;
  paymentMethod: string;
  amount: number;
}

const NewPurchasePage = () => {
  const [clientId, setClientId] = useState("");
  const [searchProductTerm, setSearchProductTerm] = useState("");
  const [searchClientTerm, setSearchClientTerm] = useState("");
  const [isCreateProductModalOpen, setIsCreateProductModalOpen] = useState(false);
  const [isCreateClientModalOpen, setIsCreateClientModalOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<"products" | "payment">("products");
  const [screenSize, setScreenSize] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [filteredClients, setFilteredClients] = useState<Client[]>([]);
  const today = new Date().toISOString().split("T")[0];
  const [selectedProducts, setSelectedProducts] = 
          useState<(Product & { quantity: number, uniqueId: string })[]>([]);
  const [purchaseTransactions, setPurchaseTransactions] = useState<PurchaseTransaction[]>([
          { paymentMethod: "Efectivo", date: today, amount: 0 } ]);
  const [selectedClient, setSelectedClient] = useState<Client | null>(null);
  const [createTransaction] = useCreateTransactionMutation();
  const [createPurchasesDetail] = useCreateSalesDetailMutation();
  const [createPurchase] = useCreatePurchaseMutation();
  const [updateProduct] = useUpdateProductMutation();
  const [createProduct] = useCreateProductMutation();
  const [createClient] = useCreateClientMutation();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [billingType, setBillingType] = useState("Ninguno");
  const [purchaseBilling, setPurchaseBilling] = useState("");
  const [purchaseShipping, setPurchaseShipping] = useState(0);
  const [isPercentageDiscount, setIsPercentageDiscount] = useState(false);
  const [purchaseDate, setPurchaseDate] = useState(today);
  const [quantitySearchBar, setQuantitySearchBar] = useState(0);
  const [priceSearchBar, setPriceSearchBar] = useState(0);
  const [selectedProduct, setSelectedProduct] = useState<((Product & { quantity: number }) | null)>(null);
  const [IGVSearchBar, setIGVSearchBar] = useState(true);
  const quantityInputRef = useRef<HTMLInputElement | null>(null);
  const [localSearchClientTerm, setLocalSearchClientTerm] = useState("");
  const [localSearchProductTerm, setLocalSearchProductTerm] = useState("");
  const router = useRouter();
  
  {/* GET PRODUCTS */}
  const {
    data: products,
    isLoading: isLoadingProducts,
    isError: isErrorProducts,
  } = useSearchProductsQuery(searchProductTerm);
  
  {/* GET CLIENTS */}
  const {
    data: clients,
    isLoading: isLoadingClients,
    isError: isErrorClients,
  } = useSearchClientsQuery(searchClientTerm);

  {/* GET CLIENT BY ID */}
  const {
    data: clientById,
    isError: isErrorClientById,
    isLoading: isLoadingClientById,
  } = useGetClientByIdQuery(clientId);
  
  {/* GET LAST PURCHASE NUMBER */}
  const {
    data: lastPurchaseNumber,
    isLoading: isLoadingLastPurchaseNumber,
    isError: isErrorLastPurchaseNumber
  } = useGetLastPurchaseNumberQuery();


  {/* HOOK FOR DETECT SIZE OF SCREEN */}
  useEffect(() => {
    const handleResize = () => setScreenSize(window.innerWidth);
    window.addEventListener("resize", handleResize);
    handleResize(); // Ejecutar al inicio
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  {/* HOOK FOR UPDATE CLIENT OF SEARCH BAR */}
  useEffect(() => {
    if(clientId){
      setSelectedClient(clientById || null);
      setSearchClientTerm(clientById?.name || "");
    }
  }, [clientId, clientById]);

  {/* HOOK FOR SEARCH PRODUCTS */ }
  useEffect(() => {
    if (searchProductTerm.trim() === "") {
      setFilteredProducts([]);
    } else {
      const results = products?.filter((p: Product) =>
        p.name.toLowerCase().includes(searchProductTerm.toLowerCase()) ||
        p.code.toLowerCase().includes(searchProductTerm.toLowerCase())
      ) || [];
      setFilteredProducts(results);
    }
  }, [searchProductTerm, products]); // Executed when `searchProductTerm` or `products` changes

  {/* HOOK FOR SEARCH CLIENTS */}
  useEffect(() => {
    if (searchClientTerm.trim() === "") {
      setFilteredClients([]);
    } else {
      const results = clients?.filter((client: Client) =>
        client.name.toLowerCase().includes(searchClientTerm.toLowerCase()) ||
        client.document?.number.toLowerCase().includes(searchClientTerm.toLowerCase())
      ) || [];
      
      setFilteredClients(results);
    }
  }, [searchClientTerm, clients]); 


  const debouncedSetSearchProductTerm = useMemo(() => 
    debounce((value: string) => {
      setSearchProductTerm(value);
    }, 300),
    []
  );
  
  const handleSearchProductChange = (value: string) => {
    if(selectedProduct){
      value = "";
      setSelectedProduct(null);
      setQuantitySearchBar(0);
      setPriceSearchBar(0);
    }
    setLocalSearchProductTerm(value); 
    debouncedSetSearchProductTerm(value); 
  };

  useEffect(() => {
    return () => {
      debouncedSetSearchProductTerm.cancel();
    };
  }, [debouncedSetSearchProductTerm]);
  

  { /* FUNCTION TO SELECT PRODUCTS */ }
  const handleSelectProduct = () => {
    if (!selectedProduct) return;
  
    setSelectedProducts((prev) => {
      return [...prev, { 
        ...selectedProduct, 
        quantity: quantitySearchBar || 1, 
        price: selectedProduct.typeTax === "IGV (18.00%)" && !IGVSearchBar ? priceSearchBar * 1.18 : priceSearchBar,
        uniqueId: uuidv4()
      }];
    });
    setQuantitySearchBar(0);
    setPriceSearchBar(0);
    setSelectedProduct(null);
    setSearchProductTerm("");
    setLocalSearchProductTerm("");
  };

  { /* FUNCTION TO REMOVE PRODUCTS BY ROW */ }
  const handleRemoveProduct = (index: number) => {
    setSelectedProducts((prev) => prev.filter((_, i) => i !== index));
  };
  
  { /* FUNCTION TO UPDATE SELECTED PRODUCTS BY ROW */ }
  const handleFieldChange = (
    index: number,
    field: keyof Product | "quantity",
    value: number | string
  ) => {
    setSelectedProducts((prev) =>
      prev.map((p, i) =>
        i === index
          ? {
              ...p,
              [field]:
                field === "quantity" || field === "price"
                  ? value === "" 
                    ? 0 
                    : typeof value === "string"
                    ? parseFloat(value)
                    : value 
                  : value,
              ...(field === "typeTax"
                ? {
                    valueTax: value === "IGV (18.00%)" && p.typeTax !== value ? 0.18 : 0,
                    price: value === "IGV (18.00%)" && p.typeTax !== value 
                      ? p.price * 1.18 
                      : value !== "IGV (18.00%)" && p.typeTax === "IGV (18.00%)" 
                      ? p.price / 1.18 
                      : p.price,
                  }
                : {}),
            }
          : p
      )
    );
  };
  
  { /* FUNCTION TO UPDATE TRANSACTIONS */ }
  const updateTransactionField = (
    index: number,
    field: keyof Transaction,
    value: string | number
  ) => {
    setPurchaseTransactions((prev) =>
      prev.map((t, i) =>
        i === index
          ? {
              ...t,
              [field]: value,
            }
          : t
      )
    );
  };

  { /* FUNCTION TO DELETE TRANSACTIONS */ }
  const removeTransactionByIndex = (index: number) => {
    // Do not allow deleting the first transaction
    if (index === 0) return;

    const updatedTransactions = purchaseTransactions.filter((_, i) => i !== index);
    setPurchaseTransactions(updatedTransactions);
  };

  { /* FUNCTION TO ADD NEW TRANSACTIONS */ }
  const addNewTransaction = () => {
    const newTransaction: PurchaseTransaction = {
      paymentMethod: "Efectivo", 
      date: today, // Fecha en formato ISO
      amount: 0, 
    };
  
    setPurchaseTransactions((prev) => [...prev, newTransaction]);
  };
  
  const debouncedSetSearchClientTerm = useMemo(() => 
    debounce((value: string) => {
      setSearchClientTerm(value);
    }, 300),
    []
  );
  
  const handleSearchClientChange = (value: string) => {
    setLocalSearchClientTerm(value); 
    debouncedSetSearchClientTerm(value); 
  };

  useEffect(() => {
    return () => {
      debouncedSetSearchClientTerm.cancel();
    };
  }, [debouncedSetSearchClientTerm]);

  {/* FUNCTION TO SELECT CLIENT */}
  const handleSelectClient = (client: Client) => {
    setSelectedClient(client);
    setSearchClientTerm(client.name);
    setLocalSearchClientTerm(client.name);
    setFilteredClients([]);
  };

  {/* FUNCTION TO REMOVE CLIENT */}
  const handleRemoveClient = () => {
    setSelectedClient(null);
    setSearchClientTerm("");
    setLocalSearchClientTerm("");
  };

  {/* FUNCTION TO EDIT CLIENT */}
  const handleEditClient = () => {
    setIsCreateClientModalOpen(true);
  };

  {/* FUNCTION TO HANDLE LOGIC OF BUTTON CANCELAR */}
  const handleCancel = () => {
    const confirmExit = window.confirm("Tiene cambios no guardados. ¿Desea descartarlos?");
    if (confirmExit) {
      window.history.back(); // Vuelve a la página anterior
    }
  };

  {/* LOADINGS AND ERRORS */}
  if (isLoadingProducts || isLoadingClients || isLoadingLastPurchaseNumber || isLoadingClientById) {
    return <div className="py-4">Cargando...</div>;
  }

  if (isErrorProducts || !products) {
    return (
      <div className="text-center text-red-500 py-4">
        No se pudieron obtener los productos
      </div>
    );
  }

  if (isErrorClients || !clients) {
    return (
      <div className="text-center text-red-500 py-4">
        No se pudieron obtener los clientes
      </div>
    );
  }

  if (isErrorLastPurchaseNumber || !lastPurchaseNumber) {
    return (
      <div className="text-center text-red-500 py-4">
        No se pudo obtener el último número de compra
      </div>
    );
  }

  if(isErrorClientById || !clientById){
    return (
      <div className="text-center text-red-500 py-4">
        Failed to fetch client by id
      </div>
    );
  }

  {/* FUNCTION TO CREATE NEW PRODUCT */}
  const handleCreateProduct = async (productData: ProductFormData) => {
    await createProduct(productData);

    setSelectedProduct(
      {
        quantity: 1,
        valueTax: productData.valueTax,
        typeTax: productData.typeTax,
        code: productData.code,
        name: productData.name,
        price: productData.price,
        productId: productData.productId,
        stockQuantity: productData.stockQuantity,
        includeTax: productData.includeTax,
      },
    );
    setFilteredProducts([]);
    setQuantitySearchBar(1);
  };

  {/* FUNCTION TO CREATE NEW CLIENT */}
  const handleCreateClient = async (clientData: ClientFormData) => {
    const response = await createClient(clientData); 
    setSelectedClient(response.data ?? null);
    setSearchClientTerm(response.data?.name ?? "");
    setFilteredClients([]);
  };

  {/* FUNCTION TO MERGE DATE AND CURRENT HOURS-MINUTES-SECONDS */}
  function mergeDateWithCurrentTime(dateString: string): string {
    if (dateString.includes("T")) {
      return new Date(dateString).toISOString(); // Ya tiene hora, devolver como está
    }
    const date = new Date(dateString + "T00:00:00Z"); // Force UTC
    const now = new Date(); 
    date.setUTCHours(now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds(), now.getUTCMilliseconds()); // Usar UTC
    return date.toISOString(); // Convert to format ISO-8601 accepted for Prisma
  }

  const existingProductIds = new Set(products.map((p) => p.productId));

  {/* FUNCTION TO HANDLE SAVE BUTTON */}
  const handleSavePurchase = async () => {
    if (!selectedClient) {
      alert("Seleccione un proveedor antes de guardar la venta.");
      return;
    }
    if (!selectedProducts){
      alert("Seleccione un producto antes de guardar la venta.");
      return;
    }
    try {
      { /* CREATE PURCHASE */ }
      const createdPurchase = await createPurchase({
        supplierId: selectedClient.clientId,
        userId: "u1", // CORREGIR 
        totalAmount: (isPercentageDiscount ? globalTotal * (1 - discount / 100) : globalTotal - discount) + purchaseShipping,
        date: new Date().toISOString(),
        state: globalChange >= 0 ? "Pagado" : "Deuda",
        number: lastPurchaseNumber.number + 1,
        discount: discount,
        isPercentageDiscount: isPercentageDiscount,
        billingNumber: purchaseBilling,
        billingType: billingType,
        shipping: purchaseShipping,
        purchaseDetails: [],
        transactions: [],
      }).unwrap();
    
      const purchaseId = createdPurchase.purchaseId;
      { /* CREATE PURCHASE DETAILS */ }
      await Promise.all(
        selectedProducts.map(async (item) => {
          return createPurchasesDetail({
            quantity: item.quantity,
            unitPrice: item.price,
            purchaseId: purchaseId,
            valueTax: item.valueTax,
            typeTax: item.typeTax,
            nameProduct: item.name,
            codeProduct: item.code,
            productId: item.productId,

          })
            .unwrap()
            .catch((error) => {
              console.error("Error al crear detalles de compra", error);
            });
        })
      );

      { /* UPDATE STOCK QUANTITY OF PRODUCTS */ }
      await Promise.all(
        selectedProducts.map(async (item) => {
          if (!existingProductIds.has(item.productId)) return;
          return updateProduct({
            productId: item.productId, 
            updatedData: { 
              stockQuantity: item.stockQuantity + item.quantity,
            }
          }).unwrap()
            .catch((error) => {
              console.error("Error al actualizar el stock del producto", error);
            });
        })
      );

      { /* CREATE TRANSACTIONS */ }
      await Promise.all(
        purchaseTransactions.map(async (transaction) => {
          return createTransaction({
            purchaseId: purchaseId,
            userId: "u1", // CORREGIR
            type: "Retiro",
            description: `Pago de venta #${lastPurchaseNumber.number + 1}`,
            date: mergeDateWithCurrentTime(transaction.date),
            paymentMethod: transaction.paymentMethod,
            amount: Number(transaction.amount),
            origin: "Pago de compra"
          })
            .unwrap()
            .catch((error) => {
              console.error("Error al crear transacciones:", error);
            });
        })
      );
      setIsModalOpen(true); 
      }
      catch (error: unknown) {
      console.error("Error al guardar la compra:", error);
      alert("Ocurrió un error al guardar la compra.");
    }
  };

  {/* RETURN TO PREVIOUS PAGE */}
  const handleBack = () => {
    router.back(); // Return to previous page
  };

  {/* FUNCTIONS TO GET DIFFERENTS GLOBAL AMOUNTS */}
  const calculateSubtotal = (product: selectedProduct) => product.quantity * product.price / (1 + product.valueTax);
  const calculateTotal = (product: selectedProduct) => product.quantity * product.price 
  const globalSubtotal = selectedProducts.reduce((acc, product) => acc + calculateSubtotal(product), 0);
  const globalIGV = selectedProducts.reduce((acc, product) => acc + product.valueTax * calculateSubtotal(product), 0);
  const globalTotal = selectedProducts.reduce((acc, product) => acc + calculateTotal(product), 0);
  const globalChange = purchaseTransactions.reduce((total, transaction) => total + Number(transaction.amount), 0) - 
        (isPercentageDiscount ? globalTotal * (1 - discount / 100) : globalTotal - discount) - purchaseShipping;
  
  return (
    <div className="flex flex-col md:flex-row gap-4 p-4">
      
      {/* FOR TABS AND MOVILS */}
      {screenSize < 768 && (
        <div className="flex justify-center gap-4 p-2 border-b">
          <Button
            variant={activeTab === "products" ? "contained" : "outlined"}
            onClick={() => setActiveTab("products")}
          >
            Productos
          </Button>
          <Button
            variant={activeTab === "payment" ? "contained" : "outlined"}
            onClick={() => setActiveTab("payment")}
          >
            Pagos
          </Button>
        </div>
      )}

      {/* PRODUCTS PANEL */}
      {(screenSize >= 768 || activeTab === "products") && (
        <div className="flex-1 bg-white p-4 rounded-lg shadow-md relative overflow-hidden">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4">
              <button
                className="bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-1 rounded-md"
                onClick={handleBack} 
              >
                Atrás
              </button>
              <h2 className="text-xl font-semibold">Productos</h2>
            </div>
          </div>

          {/* SEARCH BAR FOR PRODUCTS */}
          <div className="mb-6 relative w-full">
            <div className="flex items-center border-2 border-gray-300 rounded-lg w-full ">
              <SearchIcon className="ml-2 w-5 h-5 text-gray-500" />
              
              {/* SEARCH INPUT */}
              <div className="relative flex-1">
                <input
                  className="w-full py-2 px-4 bg-white outline-none rounded-l-md"
                  placeholder="Buscar producto"
                  value={localSearchProductTerm || ""}
                  onChange={(e) => handleSearchProductChange(e.target.value)}
                  // disabled={selectedProduct !== null}
                />
                {selectedProduct && (
                  <button
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                    onClick={() => {
                      setSearchProductTerm("");
                      setLocalSearchProductTerm("");
                      setSelectedProduct(null);
                      setQuantitySearchBar(0);
                      setPriceSearchBar(0);
                    }}
                  >
                    ✕
                  </button>
                )}
              </div>

              {/* QUANTITY INPUT */}
              <input
                ref={quantityInputRef}
                type="number"
                className="w-25 py-2 px-2 border-l outline-none"
                placeholder="Cantidad"
                value={quantitySearchBar || ""}
                onChange={(e) => setQuantitySearchBar(Number(e.target.value) || 0)}
              />

              {/* W/O IGV */}
              <select
                className="h-full border-l px-2 py-2 outline-none"
                value={IGVSearchBar ? "with-igv" : "without-igv"}
                onChange={(e) => setIGVSearchBar(e.target.value === "with-igv")}
              >
                <option value="with-igv">Con IGV</option>
                <option value="without-igv">Sin IGV</option>
              </select>


              {/* PRICE INPUT */}
              <input
                type="number"
                className="w-25 py-2 px-2 border-l outline-none"
                placeholder="Precio de compra"
                value={priceSearchBar || ""}
                onChange={(e) => setPriceSearchBar(Number(e.target.value) || 0)}
              />

              {/* BUTTON TO ADD PRODUCT */}
              <button
                className={`px-3 py-2 text-white rounded-r-md transition ${
                  selectedProduct && priceSearchBar
                    ? "bg-blue-500 hover:bg-blue-600 cursor-pointer"
                    : "bg-gray-300 cursor-not-allowed"
                }`}
                onClick={handleSelectProduct}
                disabled={!selectedProduct || !priceSearchBar}
              >
                <Plus size={20} />
              </button>
            </div>

            {/* LIST OF FILTERED PRODUCTS */}
            {filteredProducts.length > 0 && !selectedProduct ? (
              <div className="absolute w-full bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto z-10">
                {filteredProducts.map((product) => (
                  <div
                    key={product.productId}
                    className="p-2 cursor-pointer hover:bg-gray-100 flex justify-between items-center"
                    onClick={() => {
                      setSelectedProduct({ ...product, quantity: 1 });
                      setQuantitySearchBar(1);
                      setSearchProductTerm(product.name);
                      setLocalSearchProductTerm(product.name);
                      setFilteredProducts([]);
                      if (quantityInputRef.current) {
                        quantityInputRef.current.focus();
                      }
                    }}
                  >
                    <p className="font-bold">{product.code}</p>
                    <p className="text-sm text-gray-600">{product.name}</p>
                    <p className="text-sm text-gray-600">Stock: {product.stockQuantity}</p>
                    <p className="text-sm text-gray-700">PEN {product.price.toFixed(2)}</p>
                  </div>
                ))}
              </div>
            ) : (
              searchProductTerm &&
              !selectedProduct && (
                <div className="flex items-center gap-2 mt-2">
                  <p className="text-sm text-gray-600">{searchProductTerm}</p>
                  <button
                    className="px-3 py-1 text-sm text-white bg-blue-500 rounded hover:bg-blue-600"
                    onClick={() => setIsCreateProductModalOpen(true)}
                  >
                    Crear Producto
                  </button>
                </div>
              )
            )}
          </div>

          {/* SELECTED PRODUCTS TABLE */}
          {selectedProducts.length > 0 && (
            <div className="overflow-x-auto scrollbar-show pb-4">
              <table className="w-full min-w-max border-collapse border border-gray-200">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="p-2 border">Producto</th>
                    <th className="p-2 border">Cantidad</th>
                    <th className="p-2 border">Precio U.</th>
                    <th className="p-2 border">Impuesto</th>
                    <th className="p-2 border">Subtotal</th>
                    <th className="p-2 border">Total</th>
                  </tr>
                </thead>
                <tbody>
                  {selectedProducts.map((product, index) => (
                    <tr key={product.uniqueId} className="text-center">
                      { /* NAME */ }
                      <td className="p-2 border">
                        <textarea
                          className="w-40 text-center border rounded px-2 resize"
                          value={product.name}
                          onChange={(e) => handleFieldChange(index, "name", e.target.value)}
                        />
                        <p className="text-gray-400 text-sm mt-1">{product.code}</p>
                      </td>
                      { /* QUANTITY */ }
                      <td className="p-2 border">
                        <input
                          type="number"
                          placeholder="0"
                          className="w-16 text-center border rounded px-2"
                          value={product.quantity || ""}
                          onChange={(e) => handleFieldChange(index, "quantity", Number(e.target.value))}
                        />
                      </td>
                      { /* UNIT PRICE */ }
                      <td className="p-2 border">
                        <input
                          type="number"
                          className="w-24 text-center border rounded px-2"
                          placeholder="0"
                          value={product.price || ""}
                          onChange={(e) => handleFieldChange(index, "price", Number(e.target.value))}
                        />
                      </td>
                      { /* TAX */ }
                      <td className="p-2 border">
                        <select
                          className="border rounded px-2"
                          value={product.typeTax}
                          onChange={(e) => handleFieldChange(index, "typeTax", e.target.value)}
                        >
                          <option value="IGV (18.00%)">IGV (18.00%)</option>
                          <option value="Exonerado (0.00%)">Exonerado (0.00%)</option>
                          <option value="Inafecto (0.00%)">Inafecto (0.00%)</option>
                          <option value="Gratuita (0.00%)">Gratuita (0.00%)</option>
                          <option value="Exportación (0.00%)">Exportación (0.00%)</option>
                        </select>
                      </td>
                      { /* SUBTOTAL */ }
                      <td className="p-2 border">S/ {calculateSubtotal(product).toFixed(2)}</td>
                      { /* TOTAL */ }
                      <td className="p-2 border">S/ {calculateTotal(product).toFixed(2)}</td>
                      { /* BUTTON TO DELETE SELECTED PRODUCT */ }
                      <td className="p-2 border">
                        <button
                          className="text-red-500 hover:text-red-700"
                          onClick={() => handleRemoveProduct(index)}
                        >
                          <Trash2 size={20} />
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
          )}

          {/* TOTAL SUM OF ALL PRODUCTS */}
          {selectedProducts.length > 0 && (
            <div className="ml-auto max-w-sm w-full mt-5">
              <div className="grid grid-cols-4 gap-4 items-center">
                {/* DISCOUNT BUTTON*/}
                <button
                  className="px-2 py-0.5 text-sm border rounded-md bg-gray-200 hover:bg-gray-300"
                  onClick={() => setIsPercentageDiscount(!isPercentageDiscount)}
                >
                  {isPercentageDiscount ? "%" : "Monto"}
                </button>

                <span className="text-gray-700 font-semibold">Descuento:</span>

                <span className="text-gray-900 font-medium">S/</span>

                <input
                  type="number"
                  placeholder="0"
                  className="w-full text-right border rounded px-2 outline-none"
                  value={discount || ""}
                  onChange={(e) => setDiscount(Number(e.target.value) || 0)}
                />
              </div>

              {/* SUBTOTAL */}
              <div className="grid grid-cols-4 gap-4 items-center mt-2">
                <div></div>
                <span className="text-gray-700 font-semibold">Subtotal:</span>
                <span className="text-gray-900 font-medium">S/</span>
                <span className="text-right">{globalSubtotal.toFixed(2)}</span>
              </div>

              {/* IGV */}
              <div className="grid grid-cols-4 gap-4 items-center mt-2">
                <div></div>
                <span className="text-gray-700 font-semibold">IGV:</span>
                <span className="text-gray-900 font-medium">S/</span>
                <span className="text-right">{globalIGV.toFixed(2)}</span>
              </div>

              {/* TOTAL */}
              <div className="grid grid-cols-4 gap-4 items-center mt-2 pt-2">
                <div></div>
                <span className="text-gray-900 font-semibold text-lg">Total:</span>
                <span className="text-gray-900 font-medium">S/</span>
                <span className="text-right text-lg">{(isPercentageDiscount ? globalTotal * (1 - discount / 100) : globalTotal - discount).toFixed(2)}</span>
              </div>

              {/* SHIPPING */}
              {/* <div className="grid grid-cols-4 gap-4 items-center mt-2">
                <div></div>
                <span className="text-gray-700 font-semibold">Envío:</span>
                <span className="text-gray-900 font-medium">S/</span>
                <input
                  type="number"
                  placeholder="0"
                  className="w-full text-right border rounded px-2 outline-none"
                  value={purchaseShipping || ""}
                  onChange={(e) => setPurchaseShipping(Number(e.target.value) || 0)}
                />
              </div> */}

              {/* SHIPPING */}
<div className="grid grid-cols-4 gap-4 items-center mt-2 border-t pt-2">
          <span className="text-gray-900 font-semibold text-lg">Envío:</span>
          <span className="text-gray-900 font-medium">S/</span>
          {/* <input
            type="number"
            placeholder="0"
            className="w-full text-right border rounded px-2 outline-none"
            value={shipping || ""}
            onChange={(e) => setShipping(Number(e.target.value) || 0)}
          /> */}
        </div>

              {/* IMPORT TOTAL */}
              <div className="grid grid-cols-4 gap-4 items-center mt-2 border-t pt-2">
                <div></div>
                <span className="text-gray-900 font-semibold text-lg">Importe total:</span>
                <span className="text-gray-900 font-medium">S/</span>
                <span className="text-right text-lg">{
                ((isPercentageDiscount ? globalTotal * (1 - discount / 100) : globalTotal - discount) + purchaseShipping).toFixed(2)}</span>
              </div>
            </div>
          )}
          
          { /* SAVE AND CANCEL PURCHASE */ }
          {selectedProducts.length > 0 && (
            <div className="flex justify-end gap-4 mt-4 flex-wrap">
              {/* BUTTON CANCEL */}
              <button
                className="bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-md"
                onClick={handleCancel}
              >
                Cancelar
              </button>

              {/* BUTTON SAVE */}
              <button
                className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md"
                onClick={handleSavePurchase}
              >
                Guardar
              </button>

              {/* MODAL SAVE PURCHASE */}
              <SavePurchaseModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                purchaseNumber={lastPurchaseNumber.number}
              />
            </div>
          )}
        </div>
      )}

      {/* PAYMENT PANEL */}
      {(screenSize >= 768 || activeTab === "payment") && (
        <div className="w-full md:w-1/3 bg-white p-4 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">Pago</h2>

           {/* TYPE OF RECEIPT && DATE */}
            <div className="mb-4 flex gap-4 items-center">
              <div className="flex-1">
                <label className="block text-gray-700 mb-1">Tipo de Comprobante:</label>
                <Select
                  fullWidth
                  value={billingType}
                  onChange={(e) => setBillingType(e.target.value)}
                  className="h-10"
                >
                  <MenuItem value="Ninguno">Ninguno</MenuItem>
                  <MenuItem value="Boleta">Boleta</MenuItem>
                  <MenuItem value="Factura">Factura</MenuItem>
                </Select>
              </div>

              <div className="flex-1">
                <label className="block text-gray-700 mb-1">Fecha de Compra:</label>
                <input
                  type="date"
                  value={purchaseDate}
                  onChange={(e) => setPurchaseDate(e.target.value)}
                  className="h-10 px-2 w-full border rounded-md outline-none"
                />
              </div>
            </div>

            {/* NUMBER OF RECEIPT */}
            {billingType != "Ninguno" && 
            <div className="flex-1">
              <label className="block text-gray-700 mb-1">Número de {billingType}:</label>
              <input
                type="text"
                value={purchaseBilling}
                onChange={(e) => setPurchaseBilling(e.target.value)}
                className="h-10 px-2 w-full border rounded-md outline-none"
              />
            </div>
            }

            {/* PAYMENT METHOD */}
            <div className="mt-5 mb-4">
              <label className="block text-gray-700 mb-1">Método(s) de pago:</label>
              <div className="space-y-2">
                {purchaseTransactions.map((tx, index) => (
                  <div key={index} className="flex items-center gap-2">
                    {/* TYPE */}
                    <Select
                      className="w-1/3 h-10" // Altura uniforme
                      value={tx.paymentMethod}
                      onChange={(e) => updateTransactionField(index, "paymentMethod", e.target.value)}
                    >
                      <MenuItem value="Efectivo">Efectivo</MenuItem>
                      <MenuItem value="Yape">Yape</MenuItem>
                      <MenuItem value="Plin">Plin</MenuItem>
                      <MenuItem value="Transferencia">Transferencia</MenuItem>
                      <MenuItem value="Tarjeta">Tarjeta</MenuItem>
                    </Select>

                    {/* DATE */}
                    <input
                      type="date"
                      className="border rounded px-2 w-1/3 h-10 text-center"
                      value={tx.date ? tx.date.split("T")[0] : today} 
                      onChange={(e) => updateTransactionField(index, "date", e.target.value)}
                    />

                    {/* AMOUNT */}
                    <div className="flex items-center border rounded px-2 w-1/3 h-10">
                      <span className="mr-2 text-gray-500">S/</span>
                      <input
                        type="number"
                        className="w-full h-full text-right outline-none"
                        placeholder="0"
                        value={tx.amount}
                        onChange={(e) => updateTransactionField(index, "amount", e.target.value)}
                      />
                    </div>

                    {/* BUTTON DELETE PAYMENT */}
                    <button
                      className="text-gray-600 hover:text-gray-700 min-w-[15px] flex justify-center"
                      onClick={() => removeTransactionByIndex(index)}
                      style={{ visibility: purchaseTransactions.length > 1 && index > 0 ? "visible" : "hidden" }}
                    >
                      <Trash2 size={20} />
                    </button>
                  </div>
                ))}
              </div>

            {/* BUTTON ADD PAYMENT */}
            <button
              className="mt-2 text-blue-500 hover:underline"
              onClick={addNewTransaction}
            >
              + Añadir Pago
            </button>
          </div>

          {/* LOGIC FOR VUELTO/DEUDA */}
          <div className="mt-4 flex justify-between text-lg font-semibold border-t pt-2">
            <span className={ globalChange >= 0 ? "text-green-600" : "text-red-600"}>
              { globalChange >= 0 ? "Vuelto:" : "Deuda:"}
            </span>
            <div className="flex items-center">
              <span className="mr-2">S/</span>
              <span>{Math.abs(globalChange).toFixed(2)}</span>
            </div>
          </div>

          {/* CLIENTS */}
          <h2 className="mb-2 mt-5 text-xl font-semibold">Proveedor</h2>
          {/* SEARCH BAR FOR CLIENTS */}
          <div className="mb-6 mt-1 relative w-full">
            <div className="flex items-center border-2 border-gray-200 rounded-lg w-full">
              <SearchIcon className="w-5 h-5 text-gray-500 m-2" />
              <div className="relative flex-1">
                <input
                  className="w-full py-2 px-4 rounded bg-white"
                  placeholder="Buscar cliente"
                  value={localSearchClientTerm || ""}
                  onChange={(e) => handleSearchClientChange(e.target.value)}
                  disabled={selectedClient !== null}
                />
                {selectedClient && (
                <button
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  onClick={handleRemoveClient}
                >
                  <UserX className="w-6 h-6 hover:text-blue-500"/>
                </button>
                )}
              </div>
            </div>

            {filteredClients.length > 0 && !selectedClient ? (
              <div className="absolute w-full bg-white border border-gray-200 rounded shadow-lg max-h-60 overflow-y-auto z-10">
                {filteredClients.map((client) => (
                  <div
                    key={client.clientId} 
                    className="p-2 cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSelectClient(client)}
                  >
                    <p className="font-medium">{client.name}</p>
                    <p className="text-sm text-black-400">
                      {client.document ? client.document.typeDocument : "SIN DOCUMENTO"}:{" "}
                      {client.document ? client.document.number : "00000000"}
                    </p>
                  </div>
                ))}
              </div>
            ) : (
              searchClientTerm && !selectedClient && (
                <div className="flex items-center gap-2 mt-2">
                  <p className="text-sm text-gray-600">{searchClientTerm} </p>
                  <button
                    className="px-3 py-1 text-sm text-white bg-blue-500 rounded hover:bg-blue-600"
                    onClick={() => setIsCreateClientModalOpen(true)}
                  >
                    Crear Cliente
                  </button>
                </div>
              )
            )}
          </div>

          {/* RESULTS OF SELECTED CLIENTS */}
          {selectedClient && (
            <div className="grid grid-cols-2 gap-x-4 gap-y-6 items-center">
              {/* ICON AND FIELD NAME */}
              <div className="font-semibold flex flex-col gap-6">
                <p className="flex items-center gap-2">
                  <User className="w-5 h-5 text-gray-600" /> Nombre:
                </p>
                <p className="flex items-center gap-2">
                  <IdCard className="w-5 h-5 text-gray-600" /> 
                  {selectedClient.document?.typeDocument || "Sin Documento"}:
                </p>
                <p className="flex items-center gap-2">
                  <MapPin className="w-5 h-5 text-gray-600" /> Dirección:
                </p>
              </div>

              {/* CONTENT */}
              <div className="flex flex-col gap-6">
                <p>{selectedClient.name}</p>
                <p>{selectedClient.document?.number || "00000000"}</p>
                <p>{selectedClient.address || "Dirección no especificada"}</p>
              </div>
            </div>
          )}

          {/* BUTTONS TO EDIT & DELETE CLIENT */}
          {selectedClient && (
            <div className="mt-4 flex gap-4 w-full justify-center">
              {/* Botón para editar proveedor */}
              <Button
                variant="outlined"
                color="primary"
                onClick={handleEditClient}
                startIcon={<Edit />}
                className="flex-1"
              >
                Editar Proveedor
              </Button>

              {/* Botón para eliminar proveedor */}
              <Button
                variant="outlined"
                color="error"
                onClick={handleRemoveClient}
                startIcon={<Trash2 />}
                className="flex-1"
              >
                Eliminar Proveedor
              </Button>
            </div>
          )}
        </div>
      )}

    {/* MODAL CREATE/EDIT PRODUCT*/}
    <CreateProductModal
      isOpen={isCreateProductModalOpen} 
      onClose={() => {
        setIsCreateProductModalOpen(false);
      }}
      onCreate={handleCreateProduct}
      productId={""} 
      nameProduct={searchProductTerm}
    />
    {/* MODAL CREATE/EDIT CLIENT*/}
    <CreateClientModal
      isOpen={isCreateClientModalOpen} 
      onClose={() => {
        setIsCreateClientModalOpen(false);
        if(selectedClient){
          setClientId(selectedClient.clientId);
        }
      }}
      onCreate={handleCreateClient}
      clientId={selectedClient?.clientId || ""} 
      nameClient={searchClientTerm}
    />
    </div>
  );
};

export default NewPurchasePage;
